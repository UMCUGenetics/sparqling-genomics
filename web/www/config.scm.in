;;; Copyright © 2016, 2017, 2018, 2019  Roel Janssen <roel@gnu.org>
;;;
;;; This program is free software: you can redistribute it and/or
;;; modify it under the terms of the GNU Affero General Public License
;;; as published by the Free Software Foundation, either version 3 of
;;; the License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; Affero General Public License for more details.
;;;
;;; You should have received a copy of the GNU Affero General Public
;;; License along with this program.  If not, see
;;; <http://www.gnu.org/licenses/>.

(define-module (www config)
  #:use-module (ice-9 format)
  #:use-module (oop goops)
  #:use-module (system foreign)
  #:use-module (www util)
  #:use-module (sparql driver)
  #:use-module ((www db connections)
                #:select (connection-uri
                          connection-username
                          connection-password
                          connection-backend
                          default-connection))
  #:export (default-uri-strings
            default-prefixes
            default-debug-port
            default-error-port
            default-warning-port
            set-default-debug-port!
            set-default-error-port!
            set-default-warning-port!
            system-state-graph
            system-sparql-query
            user-sparql-query
            is-shorthand-uri?
            shorthand-uri->uri
            uri->shorthand-uri
            fork-on-startup?
            set-fork-on-startup!
            set-system-connection!
            set-www-listen-address!
            set-www-listen-port!
            graph-name-max-length
            uri-string
            system-connection
            www-listen-address
            www-listen-address-family
            www-listen-port
            www-max-file-size
            www-name
            www-version
            www-hostname
            www-root
            www-cache-root
            www-static-root
            ldap-enabled?
            ldap-uri
            ldap-organizational-unit
            ldap-domain
            authentication-enabled?
            authentication-username
            authentication-password
            set-ldap-enabled!
            set-ldap-uri!
            set-ldap-organizational-unit!
            set-ldap-domain!
            set-authentication-enabled!
            set-authentication-username!
            set-authentication-password!
            fibers-available?))


;; ----------------------------------------------------------------------------
;; RUNTIME-CONFIGURATION CLASS
;; ----------------------------------------------------------------------------
;;
;; This class definition collects all run-time configurable options plus a few
;; “basic infrastructure” properties.
;;

(define-class <runtime-configuration> ()

  ;; Web settings
  ;; --------------------------------------------------------------------------
  (www-name                 #:init-value "sparqling-genomics"
                            #:getter get-www-name)

  (www-version              #:init-value "@VERSION@"
                            #:getter get-www-version)

  (www-hostname             #:init-value "http://sparqling-genomics/"
                            #:getter get-www-hostname)

  (www-root                 #:init-value
                            (lambda _
                              (if (getenv "SG_WEB_ROOT")
                                  (getenv "SG_WEB_ROOT")
                                  "@WEB_ROOT@/sparqling-genomics/web"))
                            #:getter get-www-root)
  (www-cache-root           #:init-value
                            (lambda _
                              (let ((xdg-cache-home (getenv "XDG_CACHE_HOME")))
                                (if xdg-cache-home
                                    (string-append xdg-cache-home
                                                   "/sparqling-genomics")
                                    (string-append
                                     (getenv "HOME")
                                     "/.cache/sparqling-genomics"))))
                            #:getter get-www-cache-root)
  (www-static-root          #:init-value
                            (lambda _
                              (if (getenv "SG_WEB_ROOT")
                                  (string-append (getenv "SG_WEB_ROOT") "/static")
                                   "@WEB_ROOT@/sparqling-genomics/web/static"))
                            #:getter get-www-static-root)

  (www-max-file-size        #:init-value 250000000
                            #:getter get-www-max-file-size)

  (www-listen-address-family #:init-value AF_INET
                            #:getter get-www-listen-address-family
                            #:setter set-www-listen-address-family-private!)

  (www-listen-address       #:init-value INADDR_LOOPBACK
                            #:getter get-www-listen-address
                            #:setter set-www-listen-address-private!)

  (www-listen-port          #:init-value 5000
                            #:getter get-www-listen-port
                            #:setter set-www-listen-port-private!)

  (ldap-enabled?            #:init-value #f
                            #:getter get-ldap-enabled?
                            #:setter set-ldap-enabled-private!)

  (ldap-uri                 #:init-value #f
                            #:getter get-ldap-uri
                            #:setter set-ldap-uri-private!)

  (ldap-organizational-unit #:init-value #f
                            #:getter get-ldap-organizational-unit
                            #:setter set-ldap-organizational-unit-private!)

  (ldap-domain              #:init-value #f
                            #:getter get-ldap-domain
                            #:setter set-ldap-domain-private!)

  (authentication-enabled?  #:init-value #f
                            #:getter get-authentication-enabled?
                            #:setter set-authentication-enabled-private!)

  (authentication-username  #:init-value #f
                            #:getter get-authentication-username
                            #:setter set-authentication-username-private!)

  (authentication-password  #:init-value #f
                            #:getter get-authentication-password
                            #:setter set-authentication-password-private!)

  ;; Other settings
  ;; --------------------------------------------------------------------------
  (fork-on-startup?         #:init-value #f
                            #:getter get-fork-on-startup?
                            #:setter set-fork-on-startup-private!)

  (graph-name-max-length    #:init-value 128
                            #:getter get-graph-name-max-length)

  ;; System connection settings
  ;; --------------------------------------------------------------------------
  (system-connection        #:init-value '()
                            #:getter get-system-connection
                            #:setter set-system-connection-private!)

  ;; Output ports for logging
  ;; --------------------------------------------------------------------------
  (error-port               #:init-value '()
                            #:getter get-default-error-port
                            #:setter set-default-error-port-private!)

  (warning-port             #:init-value '()
                            #:getter get-default-warning-port
                            #:setter set-warning-error-port-private!)

  (debug-port               #:init-value '()
                            #:getter get-default-debug-port
                            #:setter set-default-debug-port-private!))


;; Create an instance of the <runtime-configuration> environment.
;; ----------------------------------------------------------------------------
(define %runtime-configuration (make <runtime-configuration>))


;; ----------------------------------------------------------------------------
;; CONVENIENCE FUNCTIONS
;; ----------------------------------------------------------------------------
;;
;; These functions abstract away the need to know about the implementation
;; details.  Each property of <runtime-configuration> can be accessed using a
;; parameterless function.
;;

(define-syntax-rule
  (www-name)
  (get-www-name %runtime-configuration))

(define-syntax-rule
  (www-version)
  (get-www-version %runtime-configuration))

(define-syntax-rule
  (www-hostname)
  (get-www-hostname %runtime-configuration))

(define-syntax-rule
  (www-root)
  ((get-www-root %runtime-configuration)))

(define (www-cache-root)
  (let ((cache-root (get-www-cache-root %runtime-configuration)))
    (unless (file-exists? (cache-root))
      (mkdir-p (cache-root)))
    (cache-root)))

(define-syntax-rule
  (www-static-root)
  ((get-www-static-root %runtime-configuration)))

(define-syntax-rule
  (www-max-file-size)
  (get-www-max-file-size %runtime-configuration))

(define-syntax-rule
  (www-listen-address-family)
  (get-www-listen-address-family %runtime-configuration))

(define-syntax-rule
  (www-listen-address)
  (get-www-listen-address %runtime-configuration))

(define-syntax-rule
  (www-listen-port)
  (get-www-listen-port %runtime-configuration))

(define-syntax-rule
  (fork-on-startup?)
  (get-fork-on-startup? %runtime-configuration))

(define-syntax-rule
  (graph-name-max-length)
  (get-graph-name-max-length %runtime-configuration))

(define (default-debug-port)
  (get-default-debug-port %runtime-configuration))

(define (default-warning-port)
  (get-default-warning-port %runtime-configuration))

(define (default-error-port)
  (get-default-error-port %runtime-configuration))

(define-syntax-rule
  (set-default-debug-port! port)
  (set-default-debug-port-private! %runtime-configuration port))

(define-syntax-rule
  (set-default-warning-port! port)
  (set-default-warning-port-private! %runtime-configuration port))

(define-syntax-rule
  (set-default-error-port! port)
  (set-default-error-port-private! %runtime-configuration port))

(define-syntax-rule
  (set-fork-on-startup! arg)
  (set-fork-on-startup-private! %runtime-configuration arg))

(define (set-www-listen-address! arg)
  (if (string? arg)
      (set-www-listen-address-private!
       %runtime-configuration
       (cond
        [(string= arg "INADDR_ANY")       INADDR_ANY]
        [(string= arg "INADDR_LOOPBACK")  INADDR_LOOPBACK]
        [(string-contains arg ":")
         (begin
           (set-www-listen-address-family-private!
            %runtime-configuration AF_INET6)
           (inet-pton AF_INET6 arg))]
        [(string-contains arg ".")
         (begin
           (set-www-listen-address-family-private!
            %runtime-configuration AF_INET)
           (inet-pton AF_INET arg))]))
      #f))

(define-syntax-rule
  (set-www-listen-port! arg)
  (set-www-listen-port-private! %runtime-configuration arg))

(define-syntax-rule
  (ldap-uri)
  (get-ldap-uri %runtime-configuration))

(define-syntax-rule
  (set-ldap-uri! arg)
  (set-ldap-uri-private! %runtime-configuration arg))

(define-syntax-rule
  (ldap-organizational-unit)
  (get-ldap-organizational-unit %runtime-configuration))

(define-syntax-rule
  (set-ldap-organizational-unit! arg)
  (set-ldap-organizational-unit-private! %runtime-configuration arg))

(define-syntax-rule
  (ldap-domain)
  (get-ldap-domain %runtime-configuration))

(define-syntax-rule
  (set-ldap-domain! arg)
  (set-ldap-domain-private! %runtime-configuration arg))

(define-syntax-rule
  (ldap-enabled?)
  (get-ldap-enabled? %runtime-configuration))

(define-syntax-rule
  (set-ldap-enabled! arg)
  (set-ldap-enabled-private! %runtime-configuration arg))

(define-syntax-rule
  (authentication-enabled?)
  (get-authentication-enabled? %runtime-configuration))

(define-syntax-rule
  (set-authentication-enabled! arg)
  (set-authentication-enabled-private! %runtime-configuration arg))

(define-syntax-rule
  (authentication-username)
  (get-authentication-username %runtime-configuration))

(define-syntax-rule
  (set-authentication-username! arg)
  (set-authentication-username-private! %runtime-configuration arg))

(define-syntax-rule
  (authentication-password)
  (get-authentication-password %runtime-configuration))

(define-syntax-rule
  (set-authentication-password! arg)
  (set-authentication-password-private! %runtime-configuration arg))

(define-syntax-rule
  (set-system-connection! arg)
  (set-system-connection-private! %runtime-configuration arg))

(define-syntax-rule
  (system-connection)
  (get-system-connection %runtime-configuration))

;; ----------------------------------------------------------------------------
;; DEFAULT URIS
;; ----------------------------------------------------------------------------
;;
;; The following symbol collects commonly used URI strings.
;;

(define default-uri-strings
  '((agent        . "http://sparqling-genomics.org/Agent/")
    (auth         . "http://sparqling-genomics.org/Authorization/")
    (col          . "http://sparqling-genomics/table2rdf/Column/")
    (dc           . "http://purl.org/dc/elements/1.1/")
    (dcterms      . "http://purl.org/dc/terms/")
    (dctype       . "http://purl.org/dc/dcmitype/")
    (faldo        . "http://biohackathon.org/resource/faldo#")
    (project      . "http://sparqling-genomics.org/Project/")
    (query        . "http://sparqling-genomics.org/Query/")
    (rdf          . "http://www.w3.org/1999/02/22-rdf-syntax-ns#")
    (rdfs         . "http://www.w3.org/2000/01/rdf-schema#")
    (row          . "http://sparqling-genomics/table2rdf/Row/")
    (sg-old       . "http://sparqling-genomics/")
    (sg           . "http://sparqling-genomics.org/")
    (table2rdf    . "http://sparqling-genomics/table2rdf/")
    (vcf2rdf      . "http://sparqling-genomics/vcf2rdf/")
    (xsd          . "http://www.w3.org/2001/XMLSchema#")))

(define default-prefixes
  (format #f "~{PREFIX ~a~%~}" (map (lambda (item)
                                      (format #f "~12a <~a>"
                                              (symbol-append (car item) ':)
                                              (cdr item)))
                                    default-uri-strings)))


(define (uri->shorthand-uri input)
  (catch #t
    (lambda _
      (car (delete '#f
             (map (lambda (prefix)
                    (if (string-prefix? (cdr prefix) input)
                        (let [(remainder (substring input (string-length (cdr prefix))))]
                          (if (string-index remainder #\/)
                              #f
                              (format #f "~a:~a" (car prefix) remainder)))
                        #f))
                  default-uri-strings))))
    (lambda (key . args)
      input)))

(define (shorthand-uri->uri input)
  (catch #t
    (lambda _
      (car (delete '#f
             (map (lambda (prefix)
                    (let [(prefix-str (string-append
                                       (symbol->string (car prefix)) ":"))]
                      (if (string-prefix? prefix-str input)
                          (let [(remainder (substring input (string-length prefix-str)))]
                            (if (string-index remainder #\/)
                                #f
                                (string-append (cdr prefix) remainder)))
                          #f)))
                  default-uri-strings))))
    (lambda (key . args)
      input)))

(define (is-shorthand-uri? input)
  (catch #t
    (lambda _
      (not (null?
            (delete '#f
                    (map (lambda (prefix)
                           (string-prefix? (string-append
                                            (symbol->string (car prefix)) ":")
                                           input))
                         default-uri-strings)))))
    (lambda (key . args) #f)))

(define system-state-graph "http://sparqling-genomics.org/sg-web/state")

(define-syntax-rule
  (uri-string key)
  (assoc-ref default-uri-strings key))

(define (system-sparql-query query)
  (let [(connection (system-connection))]
    (sparql-query query
                  #:uri (connection-uri connection)
                  #:store-backend (connection-backend connection)
                  #:digest-auth
                  (if (and (connection-username connection)
                           (connection-password connection))
                      (string-append
                       (connection-username connection) ":"
                       (connection-password connection))
                      #f))))

(define (user-sparql-query username query)
  (let [(connection (default-connection username))]
    (sparql-query query
                  #:uri (connection-uri connection)
                  #:store-backend (connection-backend connection)
                  #:digest-auth
                  (if (and (connection-username connection)
                           (connection-password connection))
                      (string-append
                       (connection-username connection) ":"
                       (connection-password connection))
                      #f))))

(define (fibers-available?)
  ;; 'resolve-module' returns the module name, so wrapping it in
  ;; the redundant if-statement makes sure we return either #t or #f.
  (if (resolve-module '(fibers) #:ensure #f)
      #t
      #f))
