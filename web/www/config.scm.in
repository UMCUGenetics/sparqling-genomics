;;; Copyright © 2016, 2017, 2018, 2019  Roel Janssen <roel@gnu.org>
;;;
;;; This program is free software: you can redistribute it and/or
;;; modify it under the terms of the GNU Affero General Public License
;;; as published by the Free Software Foundation, either version 3 of
;;; the License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; Affero General Public License for more details.
;;;
;;; You should have received a copy of the GNU Affero General Public
;;; License along with this program.  If not, see
;;; <http://www.gnu.org/licenses/>.

(define-module (www config)
  #:use-module (ice-9 format)
  #:use-module (oop goops)
  #:use-module (system foreign)
  #:use-module (www util)
  #:use-module (sparql driver)
  #:use-module ((www db connections)
                #:select (connection-uri
                          connection-username
                          connection-password
                          connection-backend
                          default-connection))
  #:export (beacon-connection
  #:export (backtrace-on-error?
            beacon-enabled?
            beacon-organization-name
            beacon-organization-id
            beacon-organization-description
            beacon-organization-address
            beacon-organization-welcome-url
            beacon-organization-contact-url
            beacon-organization-logo-url
            beacon-organization-info
            beacon-sparql-query
            configuration-file
            default-uri-strings
            default-prefixes
            default-debug-port
            default-error-port
            default-warning-port
            set-default-debug-port!
            set-default-error-port!
            set-default-warning-port!
            developer-mode?
            set-developer-mode!
            system-state-graph
            system-sparql-query
            user-sparql-query
            sparql-query-with-connection
            is-shorthand-uri?
            shorthand-uri->uri
            uri->shorthand-uri
            fork-on-startup?
            set-fork-on-startup!
            set-system-connection!
            set-www-listen-address!
            set-www-listen-port!
            graph-name-max-length
            uri-string
            system-connection
            www-listen-address
            www-listen-address-family
            www-listen-port
            www-max-file-size
            www-name
            www-version
            www-hostname
            www-root
            www-cache-root
            www-static-root
            www-upload-root
            ldap-enabled?
            ldap-uri
            ldap-common-name
            ldap-organizational-unit
            ldap-domain
            ldap-ssl-certificate-directory
            ldap-ssl-certificate-file
            local-users
            add-local-user!
            set-www-upload-root!
            set-beacon-enabled!
            set-configuration-file!
            set-ldap-enabled!
            set-ldap-uri!
            set-ldap-common-name!
            set-ldap-organizational-unit!
            set-ldap-domain!
            set-ldap-ssl-certificate-directory!
            set-ldap-ssl-certificate-file!
            set-backtrace-on-error!
            set-beacon-connection!
            set-beacon-organization-name!
            set-beacon-organization-id!
            set-beacon-organization-description!
            set-beacon-organization-address!
            set-beacon-organization-welcome-url!
            set-beacon-organization-contact-url!
            set-beacon-organization-logo-url!
            set-beacon-organization-info!))


;; ----------------------------------------------------------------------------
;; RUNTIME-CONFIGURATION CLASS
;; ----------------------------------------------------------------------------
;;
;; This class definition collects all run-time configurable options plus a few
;; “basic infrastructure” properties.
;;

(define-class <runtime-configuration> ()

  ;; Web settings
  ;; --------------------------------------------------------------------------
  (www-name                 #:init-value "sparqling-genomics"
                            #:getter get-www-name)

  (www-version              #:init-value "@VERSION@"
                            #:getter get-www-version)

  (www-hostname             #:init-value "http://sparqling-genomics/"
                            #:getter get-www-hostname)

  (www-root                 #:init-value
                            (lambda _
                              (if (getenv "SG_WEB_ROOT")
                                  (getenv "SG_WEB_ROOT")
                                  "@WEB_ROOT@/sparqling-genomics/web"))
                            #:getter get-www-root)

  (www-upload-root          #:init-value
                            (lambda _
                              (if (getenv "SG_WEB_UPLOAD_ROOT")
                                  (getenv "SG_WEB_UPLOAD_ROOT")
                                  (if (getenv "TMPDIR")
                                      (getenv "TMPDIR")
                                      "/tmp")))
                            #:setter set-www-upload-root-private!
                            #:getter get-www-upload-root)

  (www-cache-root           #:init-value
                            (lambda _
                              (let ((xdg-cache-home (getenv "XDG_CACHE_HOME")))
                                (if xdg-cache-home
                                    (string-append xdg-cache-home
                                                   "/sparqling-genomics")
                                    (string-append
                                     (getenv "HOME")
                                     "/.cache/sparqling-genomics"))))
                            #:getter get-www-cache-root)
  (www-static-root          #:init-value
                            (lambda _
                              (if (getenv "SG_WEB_ROOT")
                                  (string-append (getenv "SG_WEB_ROOT") "/static")
                                   "@WEB_ROOT@/sparqling-genomics/web/static"))
                            #:getter get-www-static-root)

  (www-max-file-size        #:init-value 250000000
                            #:getter get-www-max-file-size)

  (www-listen-address-family #:init-value AF_INET
                            #:getter get-www-listen-address-family
                            #:setter set-www-listen-address-family-private!)

  (www-listen-address       #:init-value INADDR_LOOPBACK
                            #:getter get-www-listen-address
                            #:setter set-www-listen-address-private!)

  (www-listen-port          #:init-value 5000
                            #:getter get-www-listen-port
                            #:setter set-www-listen-port-private!)

  (beacon-enabled?          #:init-value #f
                            #:getter get-beacon-enabled?
                            #:setter set-beacon-enabled-private!)

  (ldap-enabled?            #:init-value #f
                            #:getter get-ldap-enabled?
                            #:setter set-ldap-enabled-private!)

  (ldap-uri                 #:init-value #f
                            #:getter get-ldap-uri
                            #:setter set-ldap-uri-private!)

  (ldap-common-name         #:init-value #f
                            #:getter get-ldap-common-name
                            #:setter set-ldap-common-name-private!)

  (ldap-organizational-unit #:init-value #f
                            #:getter get-ldap-organizational-unit
                            #:setter set-ldap-organizational-unit-private!)

  (ldap-domain              #:init-value #f
                            #:getter get-ldap-domain
                            #:setter set-ldap-domain-private!)

  (ldap-ssl-certificate-directory #:init-value #f
                            #:getter get-ldap-ssl-certificate-directory
                            #:setter set-ldap-ssl-certificate-directory-private!)

  (ldap-ssl-certificate-file #:init-value #f
                            #:getter get-ldap-ssl-certificate-file
                            #:setter set-ldap-ssl-certificate-file-private!)

  (local-users              #:init-value '()
                            #:getter get-local-users
                            #:setter set-local-users-private!)

  ;; Other settings
  ;; --------------------------------------------------------------------------
  (fork-on-startup?         #:init-value #f
                            #:getter get-fork-on-startup?
                            #:setter set-fork-on-startup-private!)

  (graph-name-max-length    #:init-value 128
                            #:getter get-graph-name-max-length)

  (developer-mode?          #:init-value #f
                            #:getter get-developer-mode?
                            #:setter set-developer-mode-private!)

  (configuration-file       #:init-value #f
                            #:getter get-configuration-file
                            #:setter set-configuration-file-private!)

  ;; Beacon settings
  ;; --------------------------------------------------------------------------
  (beacon-organization-name #:init-value #nil
                            #:getter get-beacon-organization-name
                            #:setter set-beacon-organization-name-private!)

  (beacon-organization-id   #:init-value #nil
                            #:getter get-beacon-organization-id
                            #:setter set-beacon-organization-id-private!)

  (beacon-organization-description #:init-value #nil
                            #:getter get-beacon-organization-description
                            #:setter set-beacon-organization-description-private!)

  (beacon-organization-address #:init-value #nil
                            #:getter get-beacon-organization-address
                            #:setter set-beacon-organization-address-private!)

  (beacon-organization-welcome-url #:init-value #nil
                            #:getter get-beacon-organization-welcome-url
                            #:setter set-beacon-organization-welcome-url-private!)

  (beacon-organization-contact-url #:init-value #nil
                            #:getter get-beacon-organization-contact-url
                            #:setter set-beacon-organization-contact-url-private!)

  (beacon-organization-logo-url #:init-value #nil
                            #:getter get-beacon-organization-logo-url
                            #:setter set-beacon-organization-logo-url-private!)

  (beacon-organization-info #:init-value #nil
                            #:getter get-beacon-organization-info
                            #:setter set-beacon-organization-info-private!)

  (beacon-connection        #:init-value '()
                            #:getter get-beacon-connection
                            #:setter set-beacon-connection-private!)

  ;; System connection settings
  ;; --------------------------------------------------------------------------
  (system-connection        #:init-value '()
                            #:getter get-system-connection
                            #:setter set-system-connection-private!)

  ;; Output ports for logging
  ;; --------------------------------------------------------------------------
  (error-port               #:init-value '()
                            #:getter get-default-error-port
                            #:setter set-default-error-port-private!)

  (warning-port             #:init-value '()
                            #:getter get-default-warning-port
                            #:setter set-warning-error-port-private!)

  (debug-port               #:init-value '()
                            #:getter get-default-debug-port
                            #:setter set-default-debug-port-private!)

  (backtrace-on-error?      #:init-value #f
                            #:getter get-backtrace-on-error?
                            #:setter set-backtrace-on-error-private!))


;; Create an instance of the <runtime-configuration> environment.
;; ----------------------------------------------------------------------------
(define %runtime-configuration (make <runtime-configuration>))


;; ----------------------------------------------------------------------------
;; CONVENIENCE FUNCTIONS
;; ----------------------------------------------------------------------------
;;
;; These functions abstract away the need to know about the implementation
;; details.  Each property of <runtime-configuration> can be accessed using a
;; parameterless function.
;;

(define-syntax-rule
  (www-name)
  (get-www-name %runtime-configuration))

(define-syntax-rule
  (www-version)
  (get-www-version %runtime-configuration))

(define-syntax-rule
  (www-hostname)
  (get-www-hostname %runtime-configuration))

(define-syntax-rule
  (www-root)
  ((get-www-root %runtime-configuration)))

(define-syntax-rule
  (www-upload-root)
  (get-www-upload-root %runtime-configuration))

(define-syntax-rule
  (set-www-upload-root! arg)
  (set-www-upload-root-private! %runtime-configuration arg))

(define (www-cache-root)
  (let ((cache-root (get-www-cache-root %runtime-configuration)))
    (unless (file-exists? (cache-root))
      (mkdir-p (cache-root)))
    (cache-root)))

(define-syntax-rule
  (www-static-root)
  ((get-www-static-root %runtime-configuration)))

(define-syntax-rule
  (www-max-file-size)
  (get-www-max-file-size %runtime-configuration))

(define-syntax-rule
  (www-listen-address-family)
  (get-www-listen-address-family %runtime-configuration))

(define-syntax-rule
  (www-listen-address)
  (get-www-listen-address %runtime-configuration))

(define-syntax-rule
  (www-listen-port)
  (get-www-listen-port %runtime-configuration))

(define-syntax-rule
  (fork-on-startup?)
  (get-fork-on-startup? %runtime-configuration))

(define-syntax-rule
  (developer-mode?)
  (get-developer-mode? %runtime-configuration))

(define-syntax-rule
  (graph-name-max-length)
  (get-graph-name-max-length %runtime-configuration))

(define (default-debug-port)
  (get-default-debug-port %runtime-configuration))
(define-syntax-rule (configuration-file)
  (get-configuration-file %runtime-configuration))

(define (default-warning-port)
  (get-default-warning-port %runtime-configuration))

(define (default-error-port)
  (get-default-error-port %runtime-configuration))

(define-syntax-rule
  (backtrace-on-error?)
  (get-backtrace-on-error? %runtime-configuration))

(define-syntax-rule
  (set-default-debug-port! port)
  (set-default-debug-port-private! %runtime-configuration port))

(define-syntax-rule
  (set-default-warning-port! port)
  (set-default-warning-port-private! %runtime-configuration port))

(define-syntax-rule
  (set-default-error-port! port)
  (set-default-error-port-private! %runtime-configuration port))

(define-syntax-rule
  (set-backtrace-on-error! arg)
  (set-backtrace-on-error-private! %runtime-configuration arg))

(define-syntax-rule
  (set-fork-on-startup! arg)
  (set-fork-on-startup-private! %runtime-configuration arg))

(define-syntax-rule
  (set-developer-mode! arg)
  (set-developer-mode-private! %runtime-configuration arg))

(define-syntax-rule
  (set-configuration-file! arg)
  (set-configuration-file-private! %runtime-configuration arg))

(define (set-www-listen-address! arg)
  (if (string? arg)
      (set-www-listen-address-private!
       %runtime-configuration
       (cond
        [(string= arg "INADDR_ANY")       INADDR_ANY]
        [(string= arg "INADDR_LOOPBACK")  INADDR_LOOPBACK]
        [(string-contains arg ":")
         (begin
           (set-www-listen-address-family-private!
            %runtime-configuration AF_INET6)
           (inet-pton AF_INET6 arg))]
        [(string-contains arg ".")
         (begin
           (set-www-listen-address-family-private!
            %runtime-configuration AF_INET)
           (inet-pton AF_INET arg))]))
      #f))

(define-syntax-rule
  (set-www-listen-port! arg)
  (set-www-listen-port-private! %runtime-configuration arg))

(define-syntax-rule
  (ldap-uri)
  (get-ldap-uri %runtime-configuration))

(define-syntax-rule
  (set-ldap-uri! arg)
  (set-ldap-uri-private! %runtime-configuration arg))

(define-syntax-rule
  (ldap-common-name)
  (get-ldap-common-name %runtime-configuration))

(define-syntax-rule
  (set-ldap-common-name! arg)
  (set-ldap-common-name-private! %runtime-configuration arg))

(define-syntax-rule
  (ldap-organizational-unit)
  (get-ldap-organizational-unit %runtime-configuration))

(define-syntax-rule
  (set-ldap-organizational-unit! arg)
  (set-ldap-organizational-unit-private! %runtime-configuration arg))

(define-syntax-rule
  (ldap-domain)
  (get-ldap-domain %runtime-configuration))

(define-syntax-rule
  (set-ldap-domain! arg)
  (set-ldap-domain-private! %runtime-configuration arg))

(define-syntax-rule
  (ldap-ssl-certificate-directory)
  (get-ldap-ssl-certificate-directory %runtime-configuration))

(define-syntax-rule
  (set-ldap-ssl-certificate-directory! arg)
  (set-ldap-ssl-certificate-directory-private! %runtime-configuration arg))

(define-syntax-rule
  (ldap-ssl-certificate-file)
  (get-ldap-ssl-certificate-file %runtime-configuration))

(define-syntax-rule
  (set-ldap-ssl-certificate-file! arg)
  (set-ldap-ssl-certificate-file-private! %runtime-configuration arg))

(define-syntax-rule
  (beacon-enabled?)
  (get-beacon-enabled? %runtime-configuration))

(define-syntax-rule
  (set-beacon-enabled! arg)
  (set-beacon-enabled-private! %runtime-configuration arg))

(define-syntax-rule
  (ldap-enabled?)
  (get-ldap-enabled? %runtime-configuration))

(define-syntax-rule
  (set-ldap-enabled! arg)
  (set-ldap-enabled-private! %runtime-configuration arg))

(define-syntax-rule
  (local-users)
  (get-local-users %runtime-configuration))

(define-syntax-rule
  (add-local-user! username password)
  (set-local-users-private! %runtime-configuration
                            (cons (list username password)
                                  (get-local-users %runtime-configuration))))

(define-syntax-rule
  (set-system-connection! arg)
  (set-system-connection-private! %runtime-configuration arg))

(define-syntax-rule
  (system-connection)
  (get-system-connection %runtime-configuration))

(define-syntax-rule
  (set-beacon-organization-name! name)
  (set-beacon-organization-name-private!
   %runtime-configuration name))

(define-syntax-rule
  (beacon-organization-name)
  (get-beacon-organization-name %runtime-configuration))

(define-syntax-rule
  (set-beacon-organization-id! id)
  (set-beacon-organization-id-private!
   %runtime-configuration id))

(define-syntax-rule
  (beacon-organization-id)
  (get-beacon-organization-id %runtime-configuration))

(define-syntax-rule
  (set-beacon-organization-description! description)
  (set-beacon-organization-description-private!
   %runtime-configuration description))

(define-syntax-rule
  (beacon-organization-description)
  (get-beacon-organization-description %runtime-configuration))

(define-syntax-rule
  (set-beacon-organization-address! address)
  (set-beacon-organization-address-private!
   %runtime-configuration address))

(define-syntax-rule
  (beacon-organization-address)
  (get-beacon-organization-address %runtime-configuration))

(define-syntax-rule
  (set-beacon-organization-welcome-url! welcome-url)
  (set-beacon-organization-welcome-url-private!
   %runtime-configuration welcome-url))

(define-syntax-rule
  (beacon-organization-welcome-url)
  (get-beacon-organization-welcome-url %runtime-configuration))

(define-syntax-rule
  (set-beacon-organization-contact-url! contact-url)
  (set-beacon-organization-contact-url-private!
   %runtime-configuration contact-url))

(define-syntax-rule
  (beacon-organization-contact-url)
  (get-beacon-organization-contact-url %runtime-configuration))

(define-syntax-rule
  (set-beacon-organization-logo-url! logo-url)
  (set-beacon-organization-logo-url-private!
   %runtime-configuration logo-url))

(define-syntax-rule
  (beacon-organization-logo-url)
  (get-beacon-organization-logo-url %runtime-configuration))

(define-syntax-rule
  (set-beacon-organization-info! info)
  (set-beacon-organization-info-private!
   %runtime-configuration info))

(define-syntax-rule
  (beacon-organization-info)
  (get-beacon-organization-info %runtime-configuration))

(define-syntax-rule
  (set-beacon-connection! arg)
  (set-beacon-connection-private! %runtime-configuration arg))

(define-syntax-rule
  (beacon-connection)
  (get-beacon-connection %runtime-configuration))

;; ----------------------------------------------------------------------------
;; DEFAULT URIS
;; ----------------------------------------------------------------------------
;;
;; The following symbol collects commonly used URI strings.
;;

(define default-uri-strings
  '((agent        . "http://sparqling-genomics.org/@VERSION@/Agent/")
    (auth         . "http://sparqling-genomics.org/@VERSION@/Authorization/")
    (col          . "http://sparqling-genomics/table2rdf/Column/")
    (dc           . "http://purl.org/dc/elements/1.1/")
    (dcterms      . "http://purl.org/dc/terms/")
    (dctype       . "http://purl.org/dc/dcmitype/")
    (xdt          . "http://sparqling-genomics.org/@VERSION@/xml2rdf/DynamicType/")
    (jdt          . "http://sparqling-genomics.org/@VERSION@/json2rdf/DynamicType/")
    (faldo        . "http://biohackathon.org/resource/faldo#")
    (ncbi         . "http://rdf.biosemantics.org/ontologies/ncbiassembly#")
    (project      . "http://sparqling-genomics.org/@VERSION@/Project/")
    (query        . "http://sparqling-genomics.org/@VERSION@/Query/")
    (rdf          . "http://www.w3.org/1999/02/22-rdf-syntax-ns#")
    (rdfs         . "http://www.w3.org/2000/01/rdf-schema#")
    (row          . "http://sparqling-genomics.org/@VERSION@/table2rdf/Row/")
    (sg-old       . "http://sparqling-genomics/")
    (sg           . "http://sparqling-genomics.org/@VERSION@/")
    (table2rdf    . "http://sparqling-genomics.org/@VERSION@/table2rdf/")
    (vcf2rdf      . "http://sparqling-genomics.org/@VERSION@/vcf2rdf/")
    (xml2rdf      . "http://sparqling-genomics.org/@VERSION@/xml2rdf/")
    (json2rdf     . "http://sparqling-genomics.org/@VERSION@/json2rdf/")
    (xsd          . "http://www.w3.org/2001/XMLSchema#")))

(define default-prefixes
  (format #f "~{PREFIX ~a~%~}" (map (lambda (item)
                                      (format #f "~12a <~a>"
                                              (symbol-append (car item) ':)
                                              (cdr item)))
                                    default-uri-strings)))


(define (uri->shorthand-uri input)
  (catch #t
    (lambda _
      (car (delete '#f
             (map (lambda (prefix)
                    (if (string-prefix? (cdr prefix) input)
                        (let [(remainder (substring input (string-length (cdr prefix))))]
                          (if (string-index remainder #\/)
                              #f
                              (format #f "~a:~a" (car prefix) remainder)))
                        #f))
                  default-uri-strings))))
    (lambda (key . args)
      input)))

(define (shorthand-uri->uri input)
  (catch #t
    (lambda _
      (car (delete '#f
             (map (lambda (prefix)
                    (let [(prefix-str (string-append
                                       (symbol->string (car prefix)) ":"))]
                      (if (string-prefix? prefix-str input)
                          (let [(remainder (substring input (string-length prefix-str)))]
                            (if (string-index remainder #\/)
                                #f
                                (string-append (cdr prefix) remainder)))
                          #f)))
                  default-uri-strings))))
    (lambda (key . args)
      input)))

(define (is-shorthand-uri? input)
  (catch #t
    (lambda _
      (not (null?
            (delete '#f
                    (map (lambda (prefix)
                           (and (string-prefix?
                                 (string-append
                                  (symbol->string (car prefix)) ":")
                                 input)
                                (not (string-prefix? "sg://" input))))
                         default-uri-strings)))))
    (lambda (key . args) #f)))

(define system-state-graph "http://sparqling-genomics.org/sg-web/state")

(define-syntax-rule
  (uri-string key)
  (assoc-ref default-uri-strings key))

(define (sparql-query-with-connection connection query)
  (sparql-query query
                #:uri (connection-uri connection)
                #:store-backend (connection-backend connection)
                #:digest-auth
                (if (and (connection-username connection)
                         (connection-password connection))
                    (string-append
                     (connection-username connection) ":"
                     (connection-password connection))
                    #f)))

(define-syntax-rule (system-sparql-query query)
  (sparql-query-with-connection (system-connection) query))

(define-syntax-rule (beacon-sparql-query query)
  (sparql-query-with-connection (beacon-connection) query))

(define-syntax-rule (user-sparql-query username query)
  (sparql-query-with-connection (default-connection username) query))
