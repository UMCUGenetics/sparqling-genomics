;;; Copyright © 2018  Roel Janssen <roel@gnu.org>
;;;
;;; This program is free software: you can redistribute it and/or
;;; modify it under the terms of the GNU Affero General Public License
;;; as published by the Free Software Foundation, either version 3 of
;;; the License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; Affero General Public License for more details.
;;;
;;; You should have received a copy of the GNU Affero General Public
;;; License along with this program.  If not, see
;;; <http://www.gnu.org/licenses/>.

(define-module (www db connections)
  #:use-module (www util)
  #:use-module (www config)
  #:use-module (ice-9 receive)
  #:use-module (ice-9 rdelim)
  #:use-module (srfi srfi-1)
  #:use-module (srfi srfi-9)

  #:export (connection-add
            connection-remove
            all-connections
            connection-by-name
            load-connections

            alist->connection
            connection->alist

            make-connection
            connection-name
            connection-address
            connection-port
            connection-username
            connection-password
            connection?

            set-connection-username!
            set-connection-password!))

(define %db-connections '())

;; CONNECTION RECORD TYPE
;; ----------------------------------------------------------------------------
(define-record-type <connection>
  (make-connection name address port username password)
  connection?
  (name      connection-name)
  (address   connection-address)
  (port      connection-port)
  (username  connection-username   set-connection-username!)
  (password  connection-password   set-connection-password!))


;; ALIST->CONNECTION AND CONNECTION->ALIST
;; ----------------------------------------------------------------------------
(define (alist->connection input)
  "Turns the association list INPUT into a connection record."
  (catch #t
    (lambda _
      (let ((obj (make-connection (assoc-ref input 'name)
                                  (assoc-ref input 'address)
                                  (assoc-ref input 'port)
                                  (assoc-ref input 'username)
                                  (assoc-ref input 'password))))
        (unless (connection-username obj)
          (set-connection-username! obj "dba"))
        (unless (connection-password obj)
          (set-connection-password! obj "dba"))
        obj))
    (lambda (key . args) #f)))

(define (connection->alist record)
  `((name     . ,(connection-name record))
    (address  . ,(connection-address record))
    (port     . ,(connection-port record))
    (username . ,(connection-username record))
    (password . ,(connection-password record))))


;; CONNECTIONS PERSISTENCE
;; ----------------------------------------------------------------------------
(define (load-connections)
  (let ((filename (string-append (www-root) "/connections.scm")))
    (when (file-exists? filename)
      (call-with-input-file filename
        (lambda (port)
          (set! %db-connections (map alist->connection (read port))))))))

(define (persist-connections)
  (with-output-to-file (string-append (www-root) "/connections.scm")
    (lambda _
      (format #t ";; This file was generated by sparqling-genomics.~%")
      (format #t ";; Please do not manually edit this file.~%")
      (write (map connection->alist %db-connections)))))

;; CONNECTION-ADD
;; ----------------------------------------------------------------------------
(define (connection-add record)
  "Adds a reference to the internal graph for the connection RECORD."
  (let ((name    (connection-name    record))
        (address (connection-address record))
        (port    (connection-port    record)))
    (cond
     ((string-is-longer-than name (graph-name-max-length))
      (values #f (format #f "The connection name cannot be longer than ~a characters."
                         (graph-name-max-length))))
     ((string-is-longer-than port 10)
      (values #f (format #f "Invalid port number.")))
     ((string= name "")
      (values #f (format #f "The connection name cannot empty.")))
     ((string= address "")
      (values #f (format #f "The connection address cannot empty.")))
     ((string= port "")
      (values #f (format #f "The connection port cannot empty.")))
     ((string-contains name " ")
      (values #f (format #f "The connection name cannot contain whitespace characters.")))
     (#t (begin
           (set! %db-connections (cons record %db-connections))
           (persist-connections)
           (values #t ""))))))


;; CONNECTION-REMOVE
;; ----------------------------------------------------------------------------
(define (connection-remove connection)
  "Removes the reference in the internal graph for CONNECTION."
  (let ((name (if (string? connection) connection (connection-name connection))))
    (set! %db-connections
          (filter (lambda (record)
                    (not (string= (connection-name record) name)))
                  %db-connections))
    (persist-connections)
    (values #t (format #f "Removed “~a”." name))))

(define (connection-connect connection)
  (values #f ""))

(define (connection-disconnect connection)
  (values #f ""))

;; ALL-CONNECTIONS
;; ----------------------------------------------------------------------------

(define* (all-connections #:key (filter #f))
  "Returns a list of connection URIs in the internal graph, applying FILTER to the
uris."
  (if filter
      (map filter %db-connections)
      %db-connections))

(define (connection-by-name name)
  (let ((item (filter (lambda (connection)
                        (string= (connection-name connection) name))
                      %db-connections)))
    (if (null? item)
        #f
        (car item))))
